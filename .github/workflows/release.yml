name: Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Test
        run: echo "${{ secrets.PRIVATE_KEY }}" > gha-token-test.private-key.pem

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'  # Updated Go version to a modern LTS release

      - name: Run Linter
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest

      - name: Build
        run: go build -v ./...

      - name: Run Tests
        run: go test -v ./...

      - name: Get Release Version from CHANGELOG
        id: get-release-version
        run: |
          RELEASE_VERSION=$(grep '^## \[[0-9]' CHANGELOG.md | head -n1 | sed -e 's/^.*\[//' -e 's/\].*$//')
          echo "Release Version in CHANGELOG: ${RELEASE_VERSION}"
          [ -n "${RELEASE_VERSION}" ] || { echo "Error: No version found in CHANGELOG"; exit 1; }
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Get Release Notes from CHANGELOG
        id: get-release-notes
        run: |
          RELEASE_NOTES=$(awk 'BEGIN {st=0} /^## \[[0-9]/ {st++; next} st==1 {print $0}' CHANGELOG.md)
          RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"
          echo "RELEASE_NOTES=${RELEASE_NOTES}" >> $GITHUB_ENV

      - name: Ensure Release Tag Does Not Exist
        run: |
          if git rev-parse -q --verify "refs/tags/${RELEASE_VERSION}" >/dev/null; then
            echo "Error: Release tag ${RELEASE_VERSION} already exists!"
            exit 1
          fi

      - name: Create Release Artifacts
        run: |
          mkdir -p build/darwin build/linux

          # Linux x86_64 (amd64)
          GOOS=linux GOARCH=amd64 go build -o build/linux/gha-token
          tar -czf build/gha-token_${RELEASE_VERSION}_linux_amd64.tar.gz -C build/linux gha-token

          # macOS x86_64 (Intel)
          GOOS=darwin GOARCH=amd64 go build -o build/darwin/gha-token
          tar -czf build/gha-token_${RELEASE_VERSION}_darwin_amd64.tar.gz -C build/darwin gha-token

          # macOS arm64 (Apple Silicon: M1/M2/M3)
          GOOS=darwin GOARCH=arm64 go build -o build/darwin/gha-token-arm64
          tar -czf build/gha-token_${RELEASE_VERSION}_darwin_arm64.tar.gz -C build/darwin gha-token-arm64

      - name: Create Release Tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseVersion = process.env.RELEASE_VERSION;
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${releaseVersion}`,
              sha: context.sha
            });

      - name: Publish Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/*.tar.gz"
          name: "${{ env.RELEASE_VERSION }}"
          body: "${{ env.RELEASE_NOTES }}"
          tag: "${{ env.RELEASE_VERSION }}"
          token: ${{ secrets.GITHUB_TOKEN }}